snimpy -- Interactive SNMP tool
===============================

Introduction
------------

Snimpy is a Python-based replacement for tools like snmpget, snmpwalk
and snmpset. It provides a simple Pythonic interface to build SNMP
query and to navigate into MIB objects.

This is not a general-use SNMP module. You can find better ones:
 - pycopia
 - pynetsnmp, a ctype based implementation using Net-SNMP
 - PySNMP, a pure Python implementation
 - Net-SNMP own library Python
 - many others

Snimpy is aimed at being the more Pythonic possible. You should forget
that you are doing SNMP requests. Snimpy will rely on MIB to hide SNMP
details. Here are some "features" of snmimpy:
 - MIB parser based on libsmi
 - SNMP requests are handled by libnetsnmp
 - scalars are just attributes of your session object
 - columns are translated to Python dictionary and made available as
   an attribute
 - getting an attribute is like issuing a GET method
 - setting an attribute is like issuing a SET method
 - iterating over a table or a node is like using GETNEXT
 - interactive interpreter based on Python own interpreter or IPython

Here is a very simple example:

 s = Session(host="snmp.example.org")
 print s.sysDescr
 s.sysName = "anothername"
 for id in s.ifDescr:
     print "Interface %d: %s" % (id, s.ifDescr[id])

And here are the limitations
 - only work with MIB, no MIB, no access
 - only work with scalars, table, columns and nodes (no row, no
   notification, no group, no compliance, no capabilities)
 - SNMPv1/v2 only (SNMPv3 would be simple to implement though)

Snimpy uses IPython to provide a cleaner console if
available. Otherwise, it uses internal Python console.

License
-------

Snimpy is licensed under MIT/X11 license. See at the top of source
files for details. This license allows to interface freely with
Net-SNMP and OpenSSL.

Installation and usage
----------------------

You can install using:
 python setup.py build
 python setup.py install

Or without installation:
 python bin/snimpy.py

See examples in examples/ directory.

History
-------

There are a lot of SNMP tools available but most of them have
important drawback when you something as simple as snmpget while still
being able to automatize repetitive tasks.

snmpget, snmpset and snmpwalk are difficult to use in scripts. Errors
are printed on standard output and there is no easy way to tell if the
command was successful or not. Moreover, results can be multiline (a
long HexString for example). At least, automatisation is done through
the shell and OID or bit manipulation are quite difficult.

Net-SNMP provides officiel bindings for Perl and
Python. Unfortunately, the integration is quite poor. You don't have
an easy way to load and browse MIBs and error handling is
inexistant. For example, the Python bindings will return None for a
non-existant OID. Having to check for this on each request is quite
cumbersome.

For Python, there are other bindings. For example, pysnmp provides a
pure Python implementation. However, MIBs need to be
compiled. Moreover, the exposed interface is still low-level. Sending
a simple SNMP GET can either take 10 lines or one line wrapped into 10
lines.

Other Python bindings are not maintained any more. For example yasnmp
does not compile with current libsnmp.

Have a look at pycopia. It contains a great SNMP library:
 http://code.google.com/p/pycopia/
